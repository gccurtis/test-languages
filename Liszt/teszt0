define not (lambda (v) (cond (v #f) (#t #t) ))

form (if ~c `t `e) (cond (c (evalx t)) (#t (evalx e)) )

def append (lambda (x y) (pass (rel x) y))

def cons append

form (loopx ~l `i `expr) (evalis (def pos 0) (loop (len l) (evalis (def i (@ pos l)) (evalx expr) (def pos (+ pos 1))) ) )

def a (+ 1 2)

def x (quote a)

;def y (lambda (x) (+ 1 x))

;cond ( (#t (println 2)) (#t (println 3)) )

;loop a (println first) (println second)

;println (:x)

;println (y 4)

;println (void ( (x x) ) (x))

println ( (lambda (x) (evalis (println (escape () (x)) ) (println x) 0) ) 2)

println "Here"

define o ()

println "Here"

println "o:" o

define o (cons o (quote i) )

println "Again o:" o

def h (fexpr (t) t)
def g (lambda (t) (+ t 1))

println ("before") (rel-lam (lambda (d) (d 1) ) x)

println ("before") (body (lambda (u) u) )

form (# x &h) (quote h)

println "Testing #" (# x 1 2 3)

println "Another test" ((lambda (a &x) (println (quote a) a (quote x) x) ) 1 2 3)

println "NEWLINE"

form (' `x) (x)
form (! ~x) (x)

println "Good" (! x) (' x)

define factorial (lambda (n) (cond ((< n 1) 1) ((#t) (* n (factorial (- n 1)))) ) )

println "Good" (factorial 4)

define fib (lambda (n) (cond ((< n 1) 1) (#t (+ (fib (- n 1)) (fib (- n 2)) ) ) ) )

println "Good" (fib 4)

if #t (println "Woooo") (println "Not wooo yet")

println ((lambda (&l) l) 1 2)

exit
